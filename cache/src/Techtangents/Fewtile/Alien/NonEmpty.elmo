Elm.Techtangents = Elm.Techtangents || {};
Elm.Techtangents.Fewtile = Elm.Techtangents.Fewtile || {};
Elm.Techtangents.Fewtile.Alien = Elm.Techtangents.Fewtile.Alien || {};
Elm.Techtangents.Fewtile.Alien.NonEmpty = Elm.Techtangents.Fewtile.Alien.NonEmpty || {};
Elm.Techtangents.Fewtile.Alien.NonEmpty.make = function (_elm) {
   _elm.Techtangents = _elm.Techtangents || {};
   _elm.Techtangents.Fewtile = _elm.Techtangents.Fewtile || {};
   _elm.Techtangents.Fewtile.Alien = _elm.Techtangents.Fewtile.Alien || {};
   _elm.Techtangents.Fewtile.Alien.NonEmpty = _elm.Techtangents.Fewtile.Alien.NonEmpty || {};
   if (_elm.Techtangents.Fewtile.Alien.NonEmpty.values)
   return _elm.Techtangents.Fewtile.Alien.NonEmpty.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Techtangents.Fewtile.Alien.NonEmpty";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Prelude = Elm.Prelude.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var NonEmpty = F2(function (a,
   b) {
      return {ctor: "NonEmpty"
             ,_0: a
             ,_1: b};
   });
   var neHead = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "NonEmpty":
            return _v0._0;}
         _E.Case($moduleName,
         "on line 9, column 25 to 26");
      }();
   };
   var neTail = function (_v4) {
      return function () {
         switch (_v4.ctor)
         {case "NonEmpty":
            return _v4._1;}
         _E.Case($moduleName,
         "on line 12, column 26 to 28");
      }();
   };
   var neToList = function (_v8) {
      return function () {
         switch (_v8.ctor)
         {case "NonEmpty":
            return {ctor: "::"
                   ,_0: _v8._0
                   ,_1: _v8._1};}
         _E.Case($moduleName,
         "on line 15, column 28 to 35");
      }();
   };
   var neFromList = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return Maybe.Just(A2(NonEmpty,
              list._0,
              list._1));
            case "[]":
            return Maybe.Nothing;}
         _E.Case($moduleName,
         "between lines 19 and 20");
      }();
   };
   _elm.Techtangents.Fewtile.Alien.NonEmpty.values = {_op: _op
                                                     ,neHead: neHead
                                                     ,neTail: neTail
                                                     ,neToList: neToList
                                                     ,neFromList: neFromList
                                                     ,NonEmpty: NonEmpty};
   return _elm.Techtangents.Fewtile.Alien.NonEmpty.values;
};