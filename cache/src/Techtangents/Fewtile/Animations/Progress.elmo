Elm.Techtangents = Elm.Techtangents || {};
Elm.Techtangents.Fewtile = Elm.Techtangents.Fewtile || {};
Elm.Techtangents.Fewtile.Animations = Elm.Techtangents.Fewtile.Animations || {};
Elm.Techtangents.Fewtile.Animations.Progress = Elm.Techtangents.Fewtile.Animations.Progress || {};
Elm.Techtangents.Fewtile.Animations.Progress.make = function (_elm) {
   _elm.Techtangents = _elm.Techtangents || {};
   _elm.Techtangents.Fewtile = _elm.Techtangents.Fewtile || {};
   _elm.Techtangents.Fewtile.Animations = _elm.Techtangents.Fewtile.Animations || {};
   _elm.Techtangents.Fewtile.Animations.Progress = _elm.Techtangents.Fewtile.Animations.Progress || {};
   if (_elm.Techtangents.Fewtile.Animations.Progress.values)
   return _elm.Techtangents.Fewtile.Animations.Progress.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Techtangents.Fewtile.Animations.Progress";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Prelude = Elm.Prelude.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Techtangents = Techtangents || {};
   Techtangents.Fewtile = Techtangents.Fewtile || {};
   Techtangents.Fewtile.Shingle = Elm.Techtangents.Fewtile.Shingle.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var progressInt = F3(function (percent,
   start,
   end) {
      return start + Basics.round(Basics.toFloat(end - start) / percent);
   });
   var progressColor = F3(function (percent,
   start,
   end) {
      return _U.cmp(percent,
      50) < 0 ? start : end;
   });
   var progress = F3(function (percent,
   old,
   nu) {
      return function () {
         var c = progressColor(percent);
         var p = progressInt(percent);
         return _U.replace([["color"
                            ,A2(c,old.color,nu.color)]
                           ,["x",A2(p,old.x,nu.x)]
                           ,["y",A2(p,old.y,nu.y)]
                           ,["w",A2(p,old.w,nu.w)]
                           ,["h",A2(p,old.h,nu.h)]],
         old);
      }();
   });
   var progressAll = F2(function (percent,
   shingles) {
      return A2(List.map,
      function (_v0) {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple2":
               return A3(progress,
                 percent,
                 _v0._0,
                 _v0._1);}
            _E.Case($moduleName,
            "on line 29, column 25 to 51");
         }();
      },
      shingles);
   });
   _elm.Techtangents.Fewtile.Animations.Progress.values = {_op: _op
                                                          ,progressColor: progressColor
                                                          ,progressInt: progressInt
                                                          ,progress: progress
                                                          ,progressAll: progressAll};
   return _elm.Techtangents.Fewtile.Animations.Progress.values;
};