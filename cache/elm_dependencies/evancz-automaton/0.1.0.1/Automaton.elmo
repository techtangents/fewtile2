Elm.Automaton = Elm.Automaton || {};
Elm.Automaton.make = function (_elm) {
   _elm.Automaton = _elm.Automaton || {};
   if (_elm.Automaton.values)
   return _elm.Automaton.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _E = _N.Error.make(_elm),
   _J = _N.JavaScript.make(_elm),
   $moduleName = "Automaton";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Prelude = Elm.Prelude.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var dequeue = function (q) {
      return function () {
         switch (q.ctor)
         {case "_Tuple2":
            switch (q._0.ctor)
              {case "[]": switch (q._1.ctor)
                   {case "[]":
                      return Maybe.Nothing;}
                   break;}
              switch (q._1.ctor)
              {case "::":
                 return Maybe.Just({ctor: "_Tuple2"
                                   ,_0: q._1._0
                                   ,_1: {ctor: "_Tuple2"
                                        ,_0: q._0
                                        ,_1: q._1._1}});
                 case "[]":
                 return dequeue({ctor: "_Tuple2"
                                ,_0: _J.toList([])
                                ,_1: List.reverse(q._0)});}
              break;}
         _E.Case($moduleName,
         "between lines 116 and 121");
      }();
   };
   var enqueue = F2(function (x,
   _v5) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: {ctor: "::"
                        ,_0: x
                        ,_1: _v5._0}
                   ,_1: _v5._1};}
         _E.Case($moduleName,
         "on line 115, column 22 to 31");
      }();
   });
   var empty = {ctor: "_Tuple2"
               ,_0: _J.toList([])
               ,_1: _J.toList([])};
   var Step = function (a) {
      return {ctor: "Step",_0: a};
   };
   var run = F3(function (auto,
   base,
   inputs) {
      return function () {
         var step = F2(function (a,
         _v9) {
            return function () {
               switch (_v9.ctor)
               {case "_Tuple2":
                  switch (_v9._0.ctor)
                    {case "Step":
                       return _v9._0._0(a);}
                    break;}
               _E.Case($moduleName,
               "on line 43, column 28 to 31");
            }();
         });
         return A2(Signal.lift,
         function (_v14) {
            return function () {
               switch (_v14.ctor)
               {case "_Tuple2":
                  return _v14._1;}
               _E.Case($moduleName,
               "on line 44, column 23 to 24");
            }();
         },
         A3(Signal.foldp,
         step,
         {ctor: "_Tuple2"
         ,_0: auto
         ,_1: base},
         inputs));
      }();
   });
   var step = F2(function (a,
   _v18) {
      return function () {
         switch (_v18.ctor)
         {case "Step":
            return _v18._0(a);}
         _E.Case($moduleName,
         "on line 48, column 19 to 22");
      }();
   });
   var andThen = F2(function (f,
   g) {
      return Step(function (a) {
         return function () {
            var $ = A2(step,a,f),
            f$ = $._0,
            b = $._1;
            var $ = A2(step,b,g),
            g$ = $._0,
            c = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A2(andThen,f$,g$)
                   ,_1: c};
         }();
      });
   });
   var loop = F2(function (state,
   auto) {
      return Step(function (input) {
         return function () {
            var $ = A2(step,
            {ctor: "_Tuple2"
            ,_0: input
            ,_1: state},
            auto);
            var auto$ = function () {
               switch ($.ctor)
               {case "_Tuple2":
                  switch ($._1.ctor)
                    {case "_Tuple2": return $._0;}
                    break;}
               _E.Case($moduleName,
               "on line 68, column 54 to 77");
            }();
            var output = function () {
               switch ($.ctor)
               {case "_Tuple2":
                  switch ($._1.ctor)
                    {case "_Tuple2":
                       return $._1._0;}
                    break;}
               _E.Case($moduleName,
               "on line 68, column 54 to 77");
            }();
            var state$ = function () {
               switch ($.ctor)
               {case "_Tuple2":
                  switch ($._1.ctor)
                    {case "_Tuple2":
                       return $._1._1;}
                    break;}
               _E.Case($moduleName,
               "on line 68, column 54 to 77");
            }();
            return {ctor: "_Tuple2"
                   ,_0: A2(loop,state$,auto$)
                   ,_1: output};
         }();
      });
   });
   var combine = function (autos) {
      return Step(function (a) {
         return function () {
            var $ = List.unzip(A2(List.map,
            step(a),
            autos)),
            autos$ = $._0,
            bs = $._1;
            return {ctor: "_Tuple2"
                   ,_0: combine(autos$)
                   ,_1: bs};
         }();
      });
   };
   var pure = function (f) {
      return Step(function (x) {
         return {ctor: "_Tuple2"
                ,_0: pure(f)
                ,_1: f(x)};
      });
   };
   var state = F2(function (s,f) {
      return Step(function (x) {
         return function () {
            var s$ = A2(f,x,s);
            return {ctor: "_Tuple2"
                   ,_0: A2(state,s$,f)
                   ,_1: s$};
         }();
      });
   });
   var count = A2(state,
   0,
   F2(function (_v36,c) {
      return function () {
         return c + 1;
      }();
   }));
   var hiddenState = F2(function (s,
   f) {
      return Step(function (x) {
         return function () {
            var $ = A2(f,x,s),
            s$ = $._0,
            out = $._1;
            return {ctor: "_Tuple2"
                   ,_0: A2(hiddenState,s$,f)
                   ,_1: out};
         }();
      });
   });
   var average = function (k) {
      return function () {
         var stepFull = F2(function (n,
         _v38) {
            return function () {
               switch (_v38.ctor)
               {case "_Tuple3":
                  return function () {
                       var _v43 = dequeue(_v38._0);
                       switch (_v43.ctor)
                       {case "Just":
                          switch (_v43._0.ctor)
                            {case "_Tuple2":
                               return function () {
                                    var sum$ = _v38._2 + n - _v43._0._0;
                                    return {ctor: "_Tuple2"
                                           ,_0: {ctor: "_Tuple3"
                                                ,_0: A2(enqueue,n,_v43._0._1)
                                                ,_1: _v38._1
                                                ,_2: sum$}
                                           ,_1: sum$ / Basics.toFloat(_v38._1)};
                                 }();}
                            break;
                          case "Nothing":
                          return {ctor: "_Tuple2"
                                 ,_0: {ctor: "_Tuple3"
                                      ,_0: _v38._0
                                      ,_1: _v38._1
                                      ,_2: _v38._2}
                                 ,_1: 0};}
                       _E.Case($moduleName,
                       "between lines 128 and 132");
                    }();}
               _E.Case($moduleName,
               "between lines 128 and 132");
            }();
         });
         var step = F2(function (n,
         _v47) {
            return function () {
               switch (_v47.ctor)
               {case "_Tuple3":
                  return _U.eq(_v47._1,
                    k) ? A2(stepFull,
                    n,
                    {ctor: "_Tuple3"
                    ,_0: _v47._0
                    ,_1: _v47._1
                    ,_2: _v47._2}) : {ctor: "_Tuple2"
                                     ,_0: {ctor: "_Tuple3"
                                          ,_0: A2(enqueue,n,_v47._0)
                                          ,_1: _v47._1 + 1
                                          ,_2: _v47._2 + n}
                                     ,_1: (_v47._2 + n) / (Basics.toFloat(_v47._1) + 1)};}
               _E.Case($moduleName,
               "between lines 125 and 126");
            }();
         });
         return A2(hiddenState,
         {ctor: "_Tuple3"
         ,_0: empty
         ,_1: 0
         ,_2: 0},
         step);
      }();
   };
   _elm.Automaton.values = {_op: _op
                           ,pure: pure
                           ,state: state
                           ,hiddenState: hiddenState
                           ,run: run
                           ,step: step
                           ,andThen: andThen
                           ,combine: combine
                           ,loop: loop
                           ,count: count
                           ,average: average};
   return _elm.Automaton.values;
};